// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: runner.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Gauge.Messages {
  public static partial class Runner
  {
    static readonly string __ServiceName = "gauge.messages.Runner";

    static readonly grpc::Marshaller<global::Gauge.Messages.StepValidateRequest> __Marshaller_StepValidateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.StepValidateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.StepValidateResponse> __Marshaller_StepValidateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.StepValidateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.ExecutionStatusResponse> __Marshaller_ExecutionStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.ExecutionStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.ExecutionStartingRequest> __Marshaller_ExecutionStartingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.ExecutionStartingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.SpecExecutionStartingRequest> __Marshaller_SpecExecutionStartingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.SpecExecutionStartingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.ScenarioExecutionStartingRequest> __Marshaller_ScenarioExecutionStartingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.ScenarioExecutionStartingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.StepExecutionStartingRequest> __Marshaller_StepExecutionStartingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.StepExecutionStartingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.ExecuteStepRequest> __Marshaller_ExecuteStepRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.ExecuteStepRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.StepExecutionEndingRequest> __Marshaller_StepExecutionEndingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.StepExecutionEndingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.ScenarioExecutionEndingRequest> __Marshaller_ScenarioExecutionEndingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.ScenarioExecutionEndingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.SpecExecutionEndingRequest> __Marshaller_SpecExecutionEndingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.SpecExecutionEndingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.ExecutionEndingRequest> __Marshaller_ExecutionEndingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.ExecutionEndingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.StepNamesRequest> __Marshaller_StepNamesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.StepNamesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.StepNamesResponse> __Marshaller_StepNamesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.StepNamesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.CacheFileRequest> __Marshaller_CacheFileRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.CacheFileRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.StepPositionsRequest> __Marshaller_StepPositionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.StepPositionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.StepPositionsResponse> __Marshaller_StepPositionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.StepPositionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.ImplementationFileListResponse> __Marshaller_ImplementationFileListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.ImplementationFileListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.StubImplementationCodeRequest> __Marshaller_StubImplementationCodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.StubImplementationCodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.FileDiff> __Marshaller_FileDiff = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.FileDiff.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.StepNameRequest> __Marshaller_StepNameRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.StepNameRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.StepNameResponse> __Marshaller_StepNameResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.StepNameResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.ImplementationFileGlobPatternResponse> __Marshaller_ImplementationFileGlobPatternResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.ImplementationFileGlobPatternResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.RefactorRequest> __Marshaller_RefactorRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.RefactorRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.RefactorResponse> __Marshaller_RefactorResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.RefactorResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gauge.Messages.KillProcessRequest> __Marshaller_KillProcessRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gauge.Messages.KillProcessRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Gauge.Messages.StepValidateRequest, global::Gauge.Messages.StepValidateResponse> __Method_ValidateStep = new grpc::Method<global::Gauge.Messages.StepValidateRequest, global::Gauge.Messages.StepValidateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateStep",
        __Marshaller_StepValidateRequest,
        __Marshaller_StepValidateResponse);

    static readonly grpc::Method<global::Gauge.Messages.Empty, global::Gauge.Messages.ExecutionStatusResponse> __Method_SuiteDataStoreInit = new grpc::Method<global::Gauge.Messages.Empty, global::Gauge.Messages.ExecutionStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SuiteDataStoreInit",
        __Marshaller_Empty,
        __Marshaller_ExecutionStatusResponse);

    static readonly grpc::Method<global::Gauge.Messages.ExecutionStartingRequest, global::Gauge.Messages.ExecutionStatusResponse> __Method_ExecutionStarting = new grpc::Method<global::Gauge.Messages.ExecutionStartingRequest, global::Gauge.Messages.ExecutionStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecutionStarting",
        __Marshaller_ExecutionStartingRequest,
        __Marshaller_ExecutionStatusResponse);

    static readonly grpc::Method<global::Gauge.Messages.Empty, global::Gauge.Messages.ExecutionStatusResponse> __Method_SpecDataStoreInit = new grpc::Method<global::Gauge.Messages.Empty, global::Gauge.Messages.ExecutionStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SpecDataStoreInit",
        __Marshaller_Empty,
        __Marshaller_ExecutionStatusResponse);

    static readonly grpc::Method<global::Gauge.Messages.SpecExecutionStartingRequest, global::Gauge.Messages.ExecutionStatusResponse> __Method_SpecExecutionStarting = new grpc::Method<global::Gauge.Messages.SpecExecutionStartingRequest, global::Gauge.Messages.ExecutionStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SpecExecutionStarting",
        __Marshaller_SpecExecutionStartingRequest,
        __Marshaller_ExecutionStatusResponse);

    static readonly grpc::Method<global::Gauge.Messages.Empty, global::Gauge.Messages.ExecutionStatusResponse> __Method_ScenarioDataStoreInit = new grpc::Method<global::Gauge.Messages.Empty, global::Gauge.Messages.ExecutionStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScenarioDataStoreInit",
        __Marshaller_Empty,
        __Marshaller_ExecutionStatusResponse);

    static readonly grpc::Method<global::Gauge.Messages.ScenarioExecutionStartingRequest, global::Gauge.Messages.ExecutionStatusResponse> __Method_ScenarioExecutionStarting = new grpc::Method<global::Gauge.Messages.ScenarioExecutionStartingRequest, global::Gauge.Messages.ExecutionStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScenarioExecutionStarting",
        __Marshaller_ScenarioExecutionStartingRequest,
        __Marshaller_ExecutionStatusResponse);

    static readonly grpc::Method<global::Gauge.Messages.StepExecutionStartingRequest, global::Gauge.Messages.ExecutionStatusResponse> __Method_StepExecutionStarting = new grpc::Method<global::Gauge.Messages.StepExecutionStartingRequest, global::Gauge.Messages.ExecutionStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StepExecutionStarting",
        __Marshaller_StepExecutionStartingRequest,
        __Marshaller_ExecutionStatusResponse);

    static readonly grpc::Method<global::Gauge.Messages.ExecuteStepRequest, global::Gauge.Messages.ExecutionStatusResponse> __Method_ExecuteStep = new grpc::Method<global::Gauge.Messages.ExecuteStepRequest, global::Gauge.Messages.ExecutionStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecuteStep",
        __Marshaller_ExecuteStepRequest,
        __Marshaller_ExecutionStatusResponse);

    static readonly grpc::Method<global::Gauge.Messages.StepExecutionEndingRequest, global::Gauge.Messages.ExecutionStatusResponse> __Method_StepExecutionEnding = new grpc::Method<global::Gauge.Messages.StepExecutionEndingRequest, global::Gauge.Messages.ExecutionStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StepExecutionEnding",
        __Marshaller_StepExecutionEndingRequest,
        __Marshaller_ExecutionStatusResponse);

    static readonly grpc::Method<global::Gauge.Messages.ScenarioExecutionEndingRequest, global::Gauge.Messages.ExecutionStatusResponse> __Method_ScenarioExecutionEnding = new grpc::Method<global::Gauge.Messages.ScenarioExecutionEndingRequest, global::Gauge.Messages.ExecutionStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScenarioExecutionEnding",
        __Marshaller_ScenarioExecutionEndingRequest,
        __Marshaller_ExecutionStatusResponse);

    static readonly grpc::Method<global::Gauge.Messages.SpecExecutionEndingRequest, global::Gauge.Messages.ExecutionStatusResponse> __Method_SpecExecutionEnding = new grpc::Method<global::Gauge.Messages.SpecExecutionEndingRequest, global::Gauge.Messages.ExecutionStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SpecExecutionEnding",
        __Marshaller_SpecExecutionEndingRequest,
        __Marshaller_ExecutionStatusResponse);

    static readonly grpc::Method<global::Gauge.Messages.ExecutionEndingRequest, global::Gauge.Messages.ExecutionStatusResponse> __Method_ExecutionEnding = new grpc::Method<global::Gauge.Messages.ExecutionEndingRequest, global::Gauge.Messages.ExecutionStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecutionEnding",
        __Marshaller_ExecutionEndingRequest,
        __Marshaller_ExecutionStatusResponse);

    static readonly grpc::Method<global::Gauge.Messages.StepNamesRequest, global::Gauge.Messages.StepNamesResponse> __Method_GetStepNames = new grpc::Method<global::Gauge.Messages.StepNamesRequest, global::Gauge.Messages.StepNamesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStepNames",
        __Marshaller_StepNamesRequest,
        __Marshaller_StepNamesResponse);

    static readonly grpc::Method<global::Gauge.Messages.CacheFileRequest, global::Gauge.Messages.Empty> __Method_CacheFile = new grpc::Method<global::Gauge.Messages.CacheFileRequest, global::Gauge.Messages.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CacheFile",
        __Marshaller_CacheFileRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Gauge.Messages.StepPositionsRequest, global::Gauge.Messages.StepPositionsResponse> __Method_GetStepPositions = new grpc::Method<global::Gauge.Messages.StepPositionsRequest, global::Gauge.Messages.StepPositionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStepPositions",
        __Marshaller_StepPositionsRequest,
        __Marshaller_StepPositionsResponse);

    static readonly grpc::Method<global::Gauge.Messages.Empty, global::Gauge.Messages.ImplementationFileListResponse> __Method_GetImplementationFiles = new grpc::Method<global::Gauge.Messages.Empty, global::Gauge.Messages.ImplementationFileListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetImplementationFiles",
        __Marshaller_Empty,
        __Marshaller_ImplementationFileListResponse);

    static readonly grpc::Method<global::Gauge.Messages.StubImplementationCodeRequest, global::Gauge.Messages.FileDiff> __Method_ImplementStub = new grpc::Method<global::Gauge.Messages.StubImplementationCodeRequest, global::Gauge.Messages.FileDiff>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ImplementStub",
        __Marshaller_StubImplementationCodeRequest,
        __Marshaller_FileDiff);

    static readonly grpc::Method<global::Gauge.Messages.StepNameRequest, global::Gauge.Messages.StepNameResponse> __Method_GetStepName = new grpc::Method<global::Gauge.Messages.StepNameRequest, global::Gauge.Messages.StepNameResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStepName",
        __Marshaller_StepNameRequest,
        __Marshaller_StepNameResponse);

    static readonly grpc::Method<global::Gauge.Messages.Empty, global::Gauge.Messages.ImplementationFileGlobPatternResponse> __Method_GetGlobPatterns = new grpc::Method<global::Gauge.Messages.Empty, global::Gauge.Messages.ImplementationFileGlobPatternResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGlobPatterns",
        __Marshaller_Empty,
        __Marshaller_ImplementationFileGlobPatternResponse);

    static readonly grpc::Method<global::Gauge.Messages.RefactorRequest, global::Gauge.Messages.RefactorResponse> __Method_Refactor = new grpc::Method<global::Gauge.Messages.RefactorRequest, global::Gauge.Messages.RefactorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Refactor",
        __Marshaller_RefactorRequest,
        __Marshaller_RefactorResponse);

    static readonly grpc::Method<global::Gauge.Messages.KillProcessRequest, global::Gauge.Messages.Empty> __Method_KillProcess = new grpc::Method<global::Gauge.Messages.KillProcessRequest, global::Gauge.Messages.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "KillProcess",
        __Marshaller_KillProcessRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Gauge.Messages.RunnerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Runner</summary>
    public abstract partial class RunnerBase
    {
      /// <summary>
      /// ValidateStep is a RPC to validate a given step.
      ///
      /// Accepts a StepValidateRequest message and returns a StepValidateResponse message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.StepValidateResponse> ValidateStep(global::Gauge.Messages.StepValidateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SuiteDataStoreInit is a RPC to initialize the suite level data store.
      ///
      /// Accepts a Empty message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.ExecutionStatusResponse> SuiteDataStoreInit(global::Gauge.Messages.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ExecutionStarting is a RPC to tell runner to execute Suite level hooks.
      ///
      /// Accepts a ExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.ExecutionStatusResponse> ExecutionStarting(global::Gauge.Messages.ExecutionStartingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SpecDataStoreInit is a RPC to initialize the spec level data store.
      ///
      /// Accepts a Empty message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.ExecutionStatusResponse> SpecDataStoreInit(global::Gauge.Messages.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SpecExecutionStarting is a RPC to tell runner to execute spec level hooks.
      ///
      /// Accepts a SpecExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.ExecutionStatusResponse> SpecExecutionStarting(global::Gauge.Messages.SpecExecutionStartingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ScenarioDataStoreInit is a RPC to initialize the scenario level data store.
      ///
      /// Accepts a Empty message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.ExecutionStatusResponse> ScenarioDataStoreInit(global::Gauge.Messages.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ScenarioExecutionStarting is a RPC to tell runner to execute scenario level hooks.
      ///
      /// Accepts a ScenarioExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.ExecutionStatusResponse> ScenarioExecutionStarting(global::Gauge.Messages.ScenarioExecutionStartingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StepExecutionStarting is a RPC to tell runner to execute step level hooks.
      ///
      /// Accepts a StepExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.ExecutionStatusResponse> StepExecutionStarting(global::Gauge.Messages.StepExecutionStartingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ExecuteStep is a RPC to tell runner to execute a step .
      ///
      /// Accepts a ExecuteStepRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.ExecutionStatusResponse> ExecuteStep(global::Gauge.Messages.ExecuteStepRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StepExecutionEnding is a RPC to tell runner to execute step level hooks.
      ///
      /// Accepts a StepExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.ExecutionStatusResponse> StepExecutionEnding(global::Gauge.Messages.StepExecutionEndingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ScenarioExecutionEnding is a RPC to tell runner to execute Scenario level hooks.
      ///
      /// Accepts a ScenarioExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.ExecutionStatusResponse> ScenarioExecutionEnding(global::Gauge.Messages.ScenarioExecutionEndingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SpecExecutionEnding is a RPC to tell runner to execute spec level hooks.
      ///
      /// Accepts a SpecExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.ExecutionStatusResponse> SpecExecutionEnding(global::Gauge.Messages.SpecExecutionEndingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ExecutionEnding is a RPC to tell runner to execute suite level hooks.
      ///
      /// Accepts a ExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.ExecutionStatusResponse> ExecutionEnding(global::Gauge.Messages.ExecutionEndingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetStepNames is a RPC to get all the available steps from the runner.
      ///
      /// Accepts a StepNamesRequest message and returns a StepNamesResponse
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.StepNamesResponse> GetStepNames(global::Gauge.Messages.StepNamesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CacheFile is a RPC to tell runner to load/reload/unload a implementation file.
      ///
      /// Accepts a CacheFileRequest message and returns a Empty message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.Empty> CacheFile(global::Gauge.Messages.CacheFileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetStepPositions is a RPC to get all availabe steps in file.
      ///
      /// Accepts a StepPositionsRequest message and returns a StepPositionsResponse message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.StepPositionsResponse> GetStepPositions(global::Gauge.Messages.StepPositionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetImplementationFiles is a RPC get all the existing implementaiton files.
      ///
      /// Accepts a Empty and returns a ImplementationFileListResponse message.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.ImplementationFileListResponse> GetImplementationFiles(global::Gauge.Messages.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ValidateStep is a RPC to to ask ruuner to add a given implementation to given file.
      ///
      /// Accepts a StubImplementationCodeRequest and returns a FileDiff message.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.FileDiff> ImplementStub(global::Gauge.Messages.StubImplementationCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetStepName is a RPC to get information about the given step.
      ///
      /// Accepts a StepNameRequest message and returns a StepNameResponse message.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.StepNameResponse> GetStepName(global::Gauge.Messages.StepNameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetGlobPatterns is a RPC to get the file path pattern which needs to be cached.
      ///
      /// Accepts a Empty message and returns a ImplementationFileGlobPatternResponse message.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.ImplementationFileGlobPatternResponse> GetGlobPatterns(global::Gauge.Messages.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Refactor is a RPC to refactor a given step in implementation file.
      ///
      /// Accepts a RefactorRequest message and returns a RefactorResponse message.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.RefactorResponse> Refactor(global::Gauge.Messages.RefactorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// KillProcess is a RPC tell runnner to stop grpc server and kill the runner process.
      ///
      /// Accepts a KillProcessRequest message and returns a Empty message.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gauge.Messages.Empty> KillProcess(global::Gauge.Messages.KillProcessRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Runner</summary>
    public partial class RunnerClient : grpc::ClientBase<RunnerClient>
    {
      /// <summary>Creates a new client for Runner</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RunnerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Runner that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RunnerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RunnerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RunnerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// ValidateStep is a RPC to validate a given step.
      ///
      /// Accepts a StepValidateRequest message and returns a StepValidateResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.StepValidateResponse ValidateStep(global::Gauge.Messages.StepValidateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateStep(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ValidateStep is a RPC to validate a given step.
      ///
      /// Accepts a StepValidateRequest message and returns a StepValidateResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.StepValidateResponse ValidateStep(global::Gauge.Messages.StepValidateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidateStep, null, options, request);
      }
      /// <summary>
      /// ValidateStep is a RPC to validate a given step.
      ///
      /// Accepts a StepValidateRequest message and returns a StepValidateResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.StepValidateResponse> ValidateStepAsync(global::Gauge.Messages.StepValidateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateStepAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ValidateStep is a RPC to validate a given step.
      ///
      /// Accepts a StepValidateRequest message and returns a StepValidateResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.StepValidateResponse> ValidateStepAsync(global::Gauge.Messages.StepValidateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidateStep, null, options, request);
      }
      /// <summary>
      /// SuiteDataStoreInit is a RPC to initialize the suite level data store.
      ///
      /// Accepts a Empty message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse SuiteDataStoreInit(global::Gauge.Messages.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SuiteDataStoreInit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SuiteDataStoreInit is a RPC to initialize the suite level data store.
      ///
      /// Accepts a Empty message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse SuiteDataStoreInit(global::Gauge.Messages.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SuiteDataStoreInit, null, options, request);
      }
      /// <summary>
      /// SuiteDataStoreInit is a RPC to initialize the suite level data store.
      ///
      /// Accepts a Empty message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> SuiteDataStoreInitAsync(global::Gauge.Messages.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SuiteDataStoreInitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SuiteDataStoreInit is a RPC to initialize the suite level data store.
      ///
      /// Accepts a Empty message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> SuiteDataStoreInitAsync(global::Gauge.Messages.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SuiteDataStoreInit, null, options, request);
      }
      /// <summary>
      /// ExecutionStarting is a RPC to tell runner to execute Suite level hooks.
      ///
      /// Accepts a ExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse ExecutionStarting(global::Gauge.Messages.ExecutionStartingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecutionStarting(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ExecutionStarting is a RPC to tell runner to execute Suite level hooks.
      ///
      /// Accepts a ExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse ExecutionStarting(global::Gauge.Messages.ExecutionStartingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecutionStarting, null, options, request);
      }
      /// <summary>
      /// ExecutionStarting is a RPC to tell runner to execute Suite level hooks.
      ///
      /// Accepts a ExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> ExecutionStartingAsync(global::Gauge.Messages.ExecutionStartingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecutionStartingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ExecutionStarting is a RPC to tell runner to execute Suite level hooks.
      ///
      /// Accepts a ExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> ExecutionStartingAsync(global::Gauge.Messages.ExecutionStartingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecutionStarting, null, options, request);
      }
      /// <summary>
      /// SpecDataStoreInit is a RPC to initialize the spec level data store.
      ///
      /// Accepts a Empty message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse SpecDataStoreInit(global::Gauge.Messages.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpecDataStoreInit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SpecDataStoreInit is a RPC to initialize the spec level data store.
      ///
      /// Accepts a Empty message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse SpecDataStoreInit(global::Gauge.Messages.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SpecDataStoreInit, null, options, request);
      }
      /// <summary>
      /// SpecDataStoreInit is a RPC to initialize the spec level data store.
      ///
      /// Accepts a Empty message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> SpecDataStoreInitAsync(global::Gauge.Messages.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpecDataStoreInitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SpecDataStoreInit is a RPC to initialize the spec level data store.
      ///
      /// Accepts a Empty message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> SpecDataStoreInitAsync(global::Gauge.Messages.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SpecDataStoreInit, null, options, request);
      }
      /// <summary>
      /// SpecExecutionStarting is a RPC to tell runner to execute spec level hooks.
      ///
      /// Accepts a SpecExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse SpecExecutionStarting(global::Gauge.Messages.SpecExecutionStartingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpecExecutionStarting(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SpecExecutionStarting is a RPC to tell runner to execute spec level hooks.
      ///
      /// Accepts a SpecExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse SpecExecutionStarting(global::Gauge.Messages.SpecExecutionStartingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SpecExecutionStarting, null, options, request);
      }
      /// <summary>
      /// SpecExecutionStarting is a RPC to tell runner to execute spec level hooks.
      ///
      /// Accepts a SpecExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> SpecExecutionStartingAsync(global::Gauge.Messages.SpecExecutionStartingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpecExecutionStartingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SpecExecutionStarting is a RPC to tell runner to execute spec level hooks.
      ///
      /// Accepts a SpecExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> SpecExecutionStartingAsync(global::Gauge.Messages.SpecExecutionStartingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SpecExecutionStarting, null, options, request);
      }
      /// <summary>
      /// ScenarioDataStoreInit is a RPC to initialize the scenario level data store.
      ///
      /// Accepts a Empty message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse ScenarioDataStoreInit(global::Gauge.Messages.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScenarioDataStoreInit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ScenarioDataStoreInit is a RPC to initialize the scenario level data store.
      ///
      /// Accepts a Empty message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse ScenarioDataStoreInit(global::Gauge.Messages.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScenarioDataStoreInit, null, options, request);
      }
      /// <summary>
      /// ScenarioDataStoreInit is a RPC to initialize the scenario level data store.
      ///
      /// Accepts a Empty message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> ScenarioDataStoreInitAsync(global::Gauge.Messages.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScenarioDataStoreInitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ScenarioDataStoreInit is a RPC to initialize the scenario level data store.
      ///
      /// Accepts a Empty message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> ScenarioDataStoreInitAsync(global::Gauge.Messages.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScenarioDataStoreInit, null, options, request);
      }
      /// <summary>
      /// ScenarioExecutionStarting is a RPC to tell runner to execute scenario level hooks.
      ///
      /// Accepts a ScenarioExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse ScenarioExecutionStarting(global::Gauge.Messages.ScenarioExecutionStartingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScenarioExecutionStarting(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ScenarioExecutionStarting is a RPC to tell runner to execute scenario level hooks.
      ///
      /// Accepts a ScenarioExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse ScenarioExecutionStarting(global::Gauge.Messages.ScenarioExecutionStartingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScenarioExecutionStarting, null, options, request);
      }
      /// <summary>
      /// ScenarioExecutionStarting is a RPC to tell runner to execute scenario level hooks.
      ///
      /// Accepts a ScenarioExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> ScenarioExecutionStartingAsync(global::Gauge.Messages.ScenarioExecutionStartingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScenarioExecutionStartingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ScenarioExecutionStarting is a RPC to tell runner to execute scenario level hooks.
      ///
      /// Accepts a ScenarioExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> ScenarioExecutionStartingAsync(global::Gauge.Messages.ScenarioExecutionStartingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScenarioExecutionStarting, null, options, request);
      }
      /// <summary>
      /// StepExecutionStarting is a RPC to tell runner to execute step level hooks.
      ///
      /// Accepts a StepExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse StepExecutionStarting(global::Gauge.Messages.StepExecutionStartingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StepExecutionStarting(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StepExecutionStarting is a RPC to tell runner to execute step level hooks.
      ///
      /// Accepts a StepExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse StepExecutionStarting(global::Gauge.Messages.StepExecutionStartingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StepExecutionStarting, null, options, request);
      }
      /// <summary>
      /// StepExecutionStarting is a RPC to tell runner to execute step level hooks.
      ///
      /// Accepts a StepExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> StepExecutionStartingAsync(global::Gauge.Messages.StepExecutionStartingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StepExecutionStartingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StepExecutionStarting is a RPC to tell runner to execute step level hooks.
      ///
      /// Accepts a StepExecutionStartingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> StepExecutionStartingAsync(global::Gauge.Messages.StepExecutionStartingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StepExecutionStarting, null, options, request);
      }
      /// <summary>
      /// ExecuteStep is a RPC to tell runner to execute a step .
      ///
      /// Accepts a ExecuteStepRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse ExecuteStep(global::Gauge.Messages.ExecuteStepRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteStep(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ExecuteStep is a RPC to tell runner to execute a step .
      ///
      /// Accepts a ExecuteStepRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse ExecuteStep(global::Gauge.Messages.ExecuteStepRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecuteStep, null, options, request);
      }
      /// <summary>
      /// ExecuteStep is a RPC to tell runner to execute a step .
      ///
      /// Accepts a ExecuteStepRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> ExecuteStepAsync(global::Gauge.Messages.ExecuteStepRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteStepAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ExecuteStep is a RPC to tell runner to execute a step .
      ///
      /// Accepts a ExecuteStepRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> ExecuteStepAsync(global::Gauge.Messages.ExecuteStepRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecuteStep, null, options, request);
      }
      /// <summary>
      /// StepExecutionEnding is a RPC to tell runner to execute step level hooks.
      ///
      /// Accepts a StepExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse StepExecutionEnding(global::Gauge.Messages.StepExecutionEndingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StepExecutionEnding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StepExecutionEnding is a RPC to tell runner to execute step level hooks.
      ///
      /// Accepts a StepExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse StepExecutionEnding(global::Gauge.Messages.StepExecutionEndingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StepExecutionEnding, null, options, request);
      }
      /// <summary>
      /// StepExecutionEnding is a RPC to tell runner to execute step level hooks.
      ///
      /// Accepts a StepExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> StepExecutionEndingAsync(global::Gauge.Messages.StepExecutionEndingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StepExecutionEndingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StepExecutionEnding is a RPC to tell runner to execute step level hooks.
      ///
      /// Accepts a StepExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> StepExecutionEndingAsync(global::Gauge.Messages.StepExecutionEndingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StepExecutionEnding, null, options, request);
      }
      /// <summary>
      /// ScenarioExecutionEnding is a RPC to tell runner to execute Scenario level hooks.
      ///
      /// Accepts a ScenarioExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse ScenarioExecutionEnding(global::Gauge.Messages.ScenarioExecutionEndingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScenarioExecutionEnding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ScenarioExecutionEnding is a RPC to tell runner to execute Scenario level hooks.
      ///
      /// Accepts a ScenarioExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse ScenarioExecutionEnding(global::Gauge.Messages.ScenarioExecutionEndingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScenarioExecutionEnding, null, options, request);
      }
      /// <summary>
      /// ScenarioExecutionEnding is a RPC to tell runner to execute Scenario level hooks.
      ///
      /// Accepts a ScenarioExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> ScenarioExecutionEndingAsync(global::Gauge.Messages.ScenarioExecutionEndingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScenarioExecutionEndingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ScenarioExecutionEnding is a RPC to tell runner to execute Scenario level hooks.
      ///
      /// Accepts a ScenarioExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> ScenarioExecutionEndingAsync(global::Gauge.Messages.ScenarioExecutionEndingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScenarioExecutionEnding, null, options, request);
      }
      /// <summary>
      /// SpecExecutionEnding is a RPC to tell runner to execute spec level hooks.
      ///
      /// Accepts a SpecExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse SpecExecutionEnding(global::Gauge.Messages.SpecExecutionEndingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpecExecutionEnding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SpecExecutionEnding is a RPC to tell runner to execute spec level hooks.
      ///
      /// Accepts a SpecExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse SpecExecutionEnding(global::Gauge.Messages.SpecExecutionEndingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SpecExecutionEnding, null, options, request);
      }
      /// <summary>
      /// SpecExecutionEnding is a RPC to tell runner to execute spec level hooks.
      ///
      /// Accepts a SpecExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> SpecExecutionEndingAsync(global::Gauge.Messages.SpecExecutionEndingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpecExecutionEndingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SpecExecutionEnding is a RPC to tell runner to execute spec level hooks.
      ///
      /// Accepts a SpecExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> SpecExecutionEndingAsync(global::Gauge.Messages.SpecExecutionEndingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SpecExecutionEnding, null, options, request);
      }
      /// <summary>
      /// ExecutionEnding is a RPC to tell runner to execute suite level hooks.
      ///
      /// Accepts a ExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse ExecutionEnding(global::Gauge.Messages.ExecutionEndingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecutionEnding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ExecutionEnding is a RPC to tell runner to execute suite level hooks.
      ///
      /// Accepts a ExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ExecutionStatusResponse ExecutionEnding(global::Gauge.Messages.ExecutionEndingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecutionEnding, null, options, request);
      }
      /// <summary>
      /// ExecutionEnding is a RPC to tell runner to execute suite level hooks.
      ///
      /// Accepts a ExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> ExecutionEndingAsync(global::Gauge.Messages.ExecutionEndingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecutionEndingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ExecutionEnding is a RPC to tell runner to execute suite level hooks.
      ///
      /// Accepts a ExecutionEndingRequest message and returns a ExecutionStatusResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ExecutionStatusResponse> ExecutionEndingAsync(global::Gauge.Messages.ExecutionEndingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecutionEnding, null, options, request);
      }
      /// <summary>
      /// GetStepNames is a RPC to get all the available steps from the runner.
      ///
      /// Accepts a StepNamesRequest message and returns a StepNamesResponse
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.StepNamesResponse GetStepNames(global::Gauge.Messages.StepNamesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStepNames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetStepNames is a RPC to get all the available steps from the runner.
      ///
      /// Accepts a StepNamesRequest message and returns a StepNamesResponse
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.StepNamesResponse GetStepNames(global::Gauge.Messages.StepNamesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStepNames, null, options, request);
      }
      /// <summary>
      /// GetStepNames is a RPC to get all the available steps from the runner.
      ///
      /// Accepts a StepNamesRequest message and returns a StepNamesResponse
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.StepNamesResponse> GetStepNamesAsync(global::Gauge.Messages.StepNamesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStepNamesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetStepNames is a RPC to get all the available steps from the runner.
      ///
      /// Accepts a StepNamesRequest message and returns a StepNamesResponse
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.StepNamesResponse> GetStepNamesAsync(global::Gauge.Messages.StepNamesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStepNames, null, options, request);
      }
      /// <summary>
      /// CacheFile is a RPC to tell runner to load/reload/unload a implementation file.
      ///
      /// Accepts a CacheFileRequest message and returns a Empty message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.Empty CacheFile(global::Gauge.Messages.CacheFileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CacheFile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CacheFile is a RPC to tell runner to load/reload/unload a implementation file.
      ///
      /// Accepts a CacheFileRequest message and returns a Empty message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.Empty CacheFile(global::Gauge.Messages.CacheFileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CacheFile, null, options, request);
      }
      /// <summary>
      /// CacheFile is a RPC to tell runner to load/reload/unload a implementation file.
      ///
      /// Accepts a CacheFileRequest message and returns a Empty message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.Empty> CacheFileAsync(global::Gauge.Messages.CacheFileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CacheFileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CacheFile is a RPC to tell runner to load/reload/unload a implementation file.
      ///
      /// Accepts a CacheFileRequest message and returns a Empty message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.Empty> CacheFileAsync(global::Gauge.Messages.CacheFileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CacheFile, null, options, request);
      }
      /// <summary>
      /// GetStepPositions is a RPC to get all availabe steps in file.
      ///
      /// Accepts a StepPositionsRequest message and returns a StepPositionsResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.StepPositionsResponse GetStepPositions(global::Gauge.Messages.StepPositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStepPositions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetStepPositions is a RPC to get all availabe steps in file.
      ///
      /// Accepts a StepPositionsRequest message and returns a StepPositionsResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.StepPositionsResponse GetStepPositions(global::Gauge.Messages.StepPositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStepPositions, null, options, request);
      }
      /// <summary>
      /// GetStepPositions is a RPC to get all availabe steps in file.
      ///
      /// Accepts a StepPositionsRequest message and returns a StepPositionsResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.StepPositionsResponse> GetStepPositionsAsync(global::Gauge.Messages.StepPositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStepPositionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetStepPositions is a RPC to get all availabe steps in file.
      ///
      /// Accepts a StepPositionsRequest message and returns a StepPositionsResponse message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.StepPositionsResponse> GetStepPositionsAsync(global::Gauge.Messages.StepPositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStepPositions, null, options, request);
      }
      /// <summary>
      /// GetImplementationFiles is a RPC get all the existing implementaiton files.
      ///
      /// Accepts a Empty and returns a ImplementationFileListResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ImplementationFileListResponse GetImplementationFiles(global::Gauge.Messages.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetImplementationFiles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetImplementationFiles is a RPC get all the existing implementaiton files.
      ///
      /// Accepts a Empty and returns a ImplementationFileListResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ImplementationFileListResponse GetImplementationFiles(global::Gauge.Messages.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetImplementationFiles, null, options, request);
      }
      /// <summary>
      /// GetImplementationFiles is a RPC get all the existing implementaiton files.
      ///
      /// Accepts a Empty and returns a ImplementationFileListResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ImplementationFileListResponse> GetImplementationFilesAsync(global::Gauge.Messages.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetImplementationFilesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetImplementationFiles is a RPC get all the existing implementaiton files.
      ///
      /// Accepts a Empty and returns a ImplementationFileListResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ImplementationFileListResponse> GetImplementationFilesAsync(global::Gauge.Messages.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetImplementationFiles, null, options, request);
      }
      /// <summary>
      /// ValidateStep is a RPC to to ask ruuner to add a given implementation to given file.
      ///
      /// Accepts a StubImplementationCodeRequest and returns a FileDiff message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.FileDiff ImplementStub(global::Gauge.Messages.StubImplementationCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImplementStub(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ValidateStep is a RPC to to ask ruuner to add a given implementation to given file.
      ///
      /// Accepts a StubImplementationCodeRequest and returns a FileDiff message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.FileDiff ImplementStub(global::Gauge.Messages.StubImplementationCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImplementStub, null, options, request);
      }
      /// <summary>
      /// ValidateStep is a RPC to to ask ruuner to add a given implementation to given file.
      ///
      /// Accepts a StubImplementationCodeRequest and returns a FileDiff message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.FileDiff> ImplementStubAsync(global::Gauge.Messages.StubImplementationCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImplementStubAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ValidateStep is a RPC to to ask ruuner to add a given implementation to given file.
      ///
      /// Accepts a StubImplementationCodeRequest and returns a FileDiff message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.FileDiff> ImplementStubAsync(global::Gauge.Messages.StubImplementationCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImplementStub, null, options, request);
      }
      /// <summary>
      /// GetStepName is a RPC to get information about the given step.
      ///
      /// Accepts a StepNameRequest message and returns a StepNameResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.StepNameResponse GetStepName(global::Gauge.Messages.StepNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStepName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetStepName is a RPC to get information about the given step.
      ///
      /// Accepts a StepNameRequest message and returns a StepNameResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.StepNameResponse GetStepName(global::Gauge.Messages.StepNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStepName, null, options, request);
      }
      /// <summary>
      /// GetStepName is a RPC to get information about the given step.
      ///
      /// Accepts a StepNameRequest message and returns a StepNameResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.StepNameResponse> GetStepNameAsync(global::Gauge.Messages.StepNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStepNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetStepName is a RPC to get information about the given step.
      ///
      /// Accepts a StepNameRequest message and returns a StepNameResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.StepNameResponse> GetStepNameAsync(global::Gauge.Messages.StepNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStepName, null, options, request);
      }
      /// <summary>
      /// GetGlobPatterns is a RPC to get the file path pattern which needs to be cached.
      ///
      /// Accepts a Empty message and returns a ImplementationFileGlobPatternResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ImplementationFileGlobPatternResponse GetGlobPatterns(global::Gauge.Messages.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGlobPatterns(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGlobPatterns is a RPC to get the file path pattern which needs to be cached.
      ///
      /// Accepts a Empty message and returns a ImplementationFileGlobPatternResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.ImplementationFileGlobPatternResponse GetGlobPatterns(global::Gauge.Messages.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGlobPatterns, null, options, request);
      }
      /// <summary>
      /// GetGlobPatterns is a RPC to get the file path pattern which needs to be cached.
      ///
      /// Accepts a Empty message and returns a ImplementationFileGlobPatternResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ImplementationFileGlobPatternResponse> GetGlobPatternsAsync(global::Gauge.Messages.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGlobPatternsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGlobPatterns is a RPC to get the file path pattern which needs to be cached.
      ///
      /// Accepts a Empty message and returns a ImplementationFileGlobPatternResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.ImplementationFileGlobPatternResponse> GetGlobPatternsAsync(global::Gauge.Messages.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGlobPatterns, null, options, request);
      }
      /// <summary>
      /// Refactor is a RPC to refactor a given step in implementation file.
      ///
      /// Accepts a RefactorRequest message and returns a RefactorResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.RefactorResponse Refactor(global::Gauge.Messages.RefactorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Refactor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Refactor is a RPC to refactor a given step in implementation file.
      ///
      /// Accepts a RefactorRequest message and returns a RefactorResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.RefactorResponse Refactor(global::Gauge.Messages.RefactorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Refactor, null, options, request);
      }
      /// <summary>
      /// Refactor is a RPC to refactor a given step in implementation file.
      ///
      /// Accepts a RefactorRequest message and returns a RefactorResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.RefactorResponse> RefactorAsync(global::Gauge.Messages.RefactorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RefactorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Refactor is a RPC to refactor a given step in implementation file.
      ///
      /// Accepts a RefactorRequest message and returns a RefactorResponse message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.RefactorResponse> RefactorAsync(global::Gauge.Messages.RefactorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Refactor, null, options, request);
      }
      /// <summary>
      /// KillProcess is a RPC tell runnner to stop grpc server and kill the runner process.
      ///
      /// Accepts a KillProcessRequest message and returns a Empty message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.Empty KillProcess(global::Gauge.Messages.KillProcessRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KillProcess(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// KillProcess is a RPC tell runnner to stop grpc server and kill the runner process.
      ///
      /// Accepts a KillProcessRequest message and returns a Empty message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gauge.Messages.Empty KillProcess(global::Gauge.Messages.KillProcessRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_KillProcess, null, options, request);
      }
      /// <summary>
      /// KillProcess is a RPC tell runnner to stop grpc server and kill the runner process.
      ///
      /// Accepts a KillProcessRequest message and returns a Empty message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.Empty> KillProcessAsync(global::Gauge.Messages.KillProcessRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KillProcessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// KillProcess is a RPC tell runnner to stop grpc server and kill the runner process.
      ///
      /// Accepts a KillProcessRequest message and returns a Empty message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gauge.Messages.Empty> KillProcessAsync(global::Gauge.Messages.KillProcessRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_KillProcess, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RunnerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RunnerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RunnerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ValidateStep, serviceImpl.ValidateStep)
          .AddMethod(__Method_SuiteDataStoreInit, serviceImpl.SuiteDataStoreInit)
          .AddMethod(__Method_ExecutionStarting, serviceImpl.ExecutionStarting)
          .AddMethod(__Method_SpecDataStoreInit, serviceImpl.SpecDataStoreInit)
          .AddMethod(__Method_SpecExecutionStarting, serviceImpl.SpecExecutionStarting)
          .AddMethod(__Method_ScenarioDataStoreInit, serviceImpl.ScenarioDataStoreInit)
          .AddMethod(__Method_ScenarioExecutionStarting, serviceImpl.ScenarioExecutionStarting)
          .AddMethod(__Method_StepExecutionStarting, serviceImpl.StepExecutionStarting)
          .AddMethod(__Method_ExecuteStep, serviceImpl.ExecuteStep)
          .AddMethod(__Method_StepExecutionEnding, serviceImpl.StepExecutionEnding)
          .AddMethod(__Method_ScenarioExecutionEnding, serviceImpl.ScenarioExecutionEnding)
          .AddMethod(__Method_SpecExecutionEnding, serviceImpl.SpecExecutionEnding)
          .AddMethod(__Method_ExecutionEnding, serviceImpl.ExecutionEnding)
          .AddMethod(__Method_GetStepNames, serviceImpl.GetStepNames)
          .AddMethod(__Method_CacheFile, serviceImpl.CacheFile)
          .AddMethod(__Method_GetStepPositions, serviceImpl.GetStepPositions)
          .AddMethod(__Method_GetImplementationFiles, serviceImpl.GetImplementationFiles)
          .AddMethod(__Method_ImplementStub, serviceImpl.ImplementStub)
          .AddMethod(__Method_GetStepName, serviceImpl.GetStepName)
          .AddMethod(__Method_GetGlobPatterns, serviceImpl.GetGlobPatterns)
          .AddMethod(__Method_Refactor, serviceImpl.Refactor)
          .AddMethod(__Method_KillProcess, serviceImpl.KillProcess).Build();
    }

  }
}
#endregion
